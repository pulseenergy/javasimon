package org.javasimon;

import java.util.HashMap;
import java.util.Map;
import java.util.Collections;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;

/**
 * SimonFactory.
 *
 * @author <a href="mailto:virgo47@gmail.com">Richard "Virgo" Richter</a>
 * @created Aug 4, 2008
 */
public final class SimonFactory {
	public static final String HIERARCHY_DELIMITER = ".";

	private static final String ROOT_SIMON_NAME = "";

	private static final String OVERHEAD_SIMON_NAME = "Factory Overhead";

	private static final SimonStopwatch root = new RootSimon(ROOT_SIMON_NAME);

	private static SimonStopwatch overhead = new DisabledDecorator(new RootSimon(OVERHEAD_SIMON_NAME));

	private static final Map<String, Simon> allSimons = new HashMap<String, Simon>();

	private static boolean enabled = true;

	static {
		reset();
	}

	/**
	 * Returns Simon by its name if it exists.
	 *
	 * @param name name of the Simon
	 * @return simon object
	 */
	public static Simon getSimon(String name) {
		if (!enabled) {
			return DisabledSimon.INSTANCE;
		}
		overhead.start();
		Simon simon = availabilityDecorator(allSimons.get(name));
		overhead.stop();
		return simon;
	}

	/**
	 * Returns existing SimonCounter or creates new if necessary.
	 *
	 * @param name name of the Counter
	 * @return counter object
	 */
	public synchronized static SimonCounter getCounter(String name) {
		if (!enabled) {
			return DisabledSimon.INSTANCE;
		}
		overhead.start();
		Simon simon = getOrCreateSimon(name, SimonCounterImpl.class);
		overhead.stop();
		return (SimonCounter) simon;
	}

	/**
	 * Returns existing SimonStopwatch or creates new if necessary.
	 *
	 * @param name name of the Stopwatch
	 * @return stopwatch object
	 */
	public synchronized static SimonStopwatch getStopwatch(String name) {
		if (!enabled) {
			return DisabledSimon.INSTANCE;
		}
		overhead.start();
		Simon simon = getOrCreateSimon(name, SimonStopwatchImpl.class);
		overhead.stop();
		return (SimonStopwatch) simon;
	}

	/**
	 * Autogenerates name for the Simon.
	 *
	 * @param suffix name suffix for eventual Simon discrimination
	 * @param includeMethodName if true, method name will be included in the name thus effectively adding another level
	 * of hierarchy
	 * @return autogenerated name for Simon
	 */
	public static String generateName(String suffix, boolean includeMethodName) {
		if (!enabled) {
			return null;
		}
		overhead.start();
		StackTraceElement stackElement = Thread.currentThread().getStackTrace()[2];
		StringBuilder nameBuilder = new StringBuilder(stackElement.getClassName());
		if (includeMethodName) {
			nameBuilder.append('.').append(stackElement.getMethodName());
		}
		if (suffix != null) {
			nameBuilder.append(suffix);
		}
		String name = nameBuilder.toString();
		overhead.stop();
		return name;
	}

	static Simon availabilityDecorator(Simon simon) {
		if (!simon.isEnabled()) {
			simon = new DisabledDecorator(simon);
		}
		return simon;
	}

	private static Simon getOrCreateSimon(String name, Class<? extends Simon> simonClass) {
		Simon simon = allSimons.get(name);
		if (simon == null || simon instanceof UnknownSimon) {
			simon = newSimon(name, simonClass);
		} else {
			if (!(simonClass.isInstance(simon))) {
				throw new SimonException("Simon named '" + name + "' already exists and its type is '" + simon.getClass().getName() + "' while requested type is '" + simonClass.getName() + "'.");
			}
		}
		return availabilityDecorator(simon);
	}

	private static Simon newSimon(String name, Class<? extends Simon> simonClass) {
		Simon simon;
		try {
			Constructor<? extends Simon> constructor = simonClass.getConstructor(String.class);
			simon = constructor.newInstance(name);
			addToHierarchy(simon, name);
		} catch (NoSuchMethodException e) {
			throw new SimonException(e);
		} catch (InvocationTargetException e) {
			throw new SimonException(e);
		} catch (IllegalAccessException e) {
			throw new SimonException(e);
		} catch (InstantiationException e) {
			throw new SimonException(e);
		}
		return simon;
	}

	private static void addToHierarchy(Simon simon, String name) {
		allSimons.put(name, simon);
		int ix = name.lastIndexOf(HIERARCHY_DELIMITER);
		Simon parent = root;
		if (ix != -1) {
			String parentName = name.substring(0, ix);
			parent = allSimons.get(parentName);
			if (parent == null) {
				parent = new UnknownSimon(parentName);
				addToHierarchy(parent, parentName);
			}
		}
		parent.addChild(simon);
	}

	public static void enable() {
		enabled = true;
	}

	public static void disable() {
		enabled = false;
	}

	public static boolean isEnabled() {
		return enabled;
	}

	public static SimonStopwatch getRootSimon() {
		if (!enabled) {
			return DisabledSimon.INSTANCE;
		}
		return (SimonStopwatch) availabilityDecorator(root);
	}

	public static SimonStopwatch getOverheadSimon() {
		return overhead;
	}

	public static void enableOverheadSimon() {
		if (overhead instanceof DisabledDecorator) {
			overhead = (SimonStopwatch) ((DisabledDecorator) overhead).getWrappedSimon();
		}
	}

	public static void disbleOverheadSimon() {
		if (!(overhead instanceof DisabledDecorator)) {
			overhead = new DisabledDecorator(overhead);
		}
	}

	public static Map<String, Simon> simonMap() {
		if (!enabled) {
			return Collections.emptyMap();
		}
		return Collections.unmodifiableMap(allSimons);
	}

	public static void reset() {
		overhead.start();
		allSimons.clear();
		root.reset();
		allSimons.put(ROOT_SIMON_NAME, root);
		overhead.stop();
	}

	public static void main(String[] args) {
		check(allSimons.size() == 1);
		getCounter("org.javasimon.test.counter1").increment();
		check(allSimons.size() == 5);

		check(getSimon("org.javasimon.test") instanceof UnknownSimon);
		getCounter("org.javasimon.test");
		check(getSimon("org.javasimon.test") instanceof SimonCounter);

		getRootSimon().disable(true);
		check(!getRootSimon().isEnabled());
		check(!getCounter("org.javasimon.test.counter1").isEnabled());

		getCounter("org.javasimon.test.counter1").enable(false);
		check(getCounter("org.javasimon.test.counter1").isEnabled());
		check(!getCounter("org.javasimon.test").isEnabled());

		getCounter("org.javasimon.test.counter1").inheritState(false);
		check(!getCounter("org.javasimon.test.counter1").isEnabled());
		check(!getCounter("org.javasimon.test").isEnabled());

		getCounter("org.javasimon.test.counter1").disable(false);

		disable();
		check(getSimon("org.javasimon.test") instanceof DisabledSimon);
		check(getRootSimon() instanceof DisabledSimon);
		check(getRootSimon().getName() == null);
		check(generateName("-stopwatch", true) == null);

		enable();
		check(generateName("-stopwatch", true).equals("org.javasimon.SimonFactory.main-stopwatch"));

		check(false);
	}

	private static void check(boolean assertion) {
		if (!assertion) {
			System.out.println("Problem on: " + Thread.currentThread().getStackTrace()[2]);
		}
	}
}
