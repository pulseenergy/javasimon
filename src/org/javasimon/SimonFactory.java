package org.javasimon;

import java.util.*;
import java.util.logging.Logger;
import java.util.logging.Level;
import java.io.*;

/**
 * SimonFactory.
 *
 * @author <a href="mailto:virgo47@gmail.com">Richard "Virgo" Richter</a>
 * @created Aug 4, 2008
 */
public final class SimonFactory {
	public static final String PROPERTY_CONFIG_FILE_NAME = "javasimon.config.file";

	public static final String PROPERTY_CONFIG_RESOURCE_NAME = "javasimon.config.resource";

	public static final String HIERARCHY_DELIMITER = ".";

	public static final String ROOT_SIMON_NAME = "";

	private static Factory factory = EnabledFactory.INSTANCE;

	static {
		reset();
		try {
			initFromConfig();
		} catch (IOException e) {
			Logger.getLogger(SimonFactory.class.getName()).log(Level.SEVERE, "Simon config couldn't be processed correctly", e);
		}
	}

	private SimonFactory() {
		throw new UnsupportedOperationException();
	}

	private static void initFromConfig() throws IOException {
		String fileName = System.getProperty(PROPERTY_CONFIG_FILE_NAME);
		if (fileName != null) {
			FileReader reader = new FileReader(fileName);
			try {
				initFromReader(reader);
			} finally {
				reader.close();
			}
		}
		String resourceName = System.getProperty(PROPERTY_CONFIG_RESOURCE_NAME);
		if (resourceName != null) {
			InputStreamReader reader = new InputStreamReader(SimonFactory.class.getClassLoader().getResourceAsStream(resourceName));
			try {
				initFromReader(reader);
			} finally {
				reader.close();
			}
		}
	}

	private static void initFromReader(Reader reader) throws IOException {
		Properties properties = new Properties();
		properties.load(reader);
		for (String name : properties.stringPropertyNames()) {
			String simonType = null;
			StatProcessorType statProcessorType = StatProcessorType.NULL;
			SimonState state = SimonState.INHERIT;

			String value = properties.getProperty(name);
			for (String keyword : value.split("[, ]+")) {
				keyword = keyword.toLowerCase();
				if (keyword.equals("stopwatch")) {
					simonType = keyword;
				} else if (keyword.equals("counter")) {
					simonType = keyword;
				} else if (keyword.equals("basic")) {
					statProcessorType = StatProcessorType.BASIC;
				} else if (keyword.equals("enable")) {
					state = SimonState.ENABLED;
				} else if (keyword.equals("disable")) {
					state = SimonState.DISABLED;
				} else {
					System.out.println("Unknown config value '" + keyword + "' for name '" + name + "'.");
				}
			}
			Simon simon = null;
			if (simonType == null) {
				simon = getUnknown(name);
			} else if (simonType.equals("stopwatch")) {
				simon = getStopwatch(name);
			} else if (simonType.equals("counter")) {
				simon = getCounter(name);
			}
			if (simon != null) {
				simon.setStatProcessor(statProcessorType.create());
				simon.setState(state, false);
			}
		}
	}

	/**
	 * Returns Simon by its name if it exists.
	 *
	 * @param name name of the Simon
	 * @return Simon object
	 */
	public static Simon getSimon(String name) {
		return factory.getSimon(name);
	}

	/**
	 * Destroys Simon or replaces it with UnknownSimon if it's necessary to preserve the hierarchy.
	 *
	 * @param name name of the Simon
	 */
	public static void destroySimon(String name) {
		factory.destroySimon(name);
	}

	/**
	 * Returns existing SimonCounter or creates new if necessary.
	 *
	 * @param name name of the counter
	 * @return counter object
	 */
	public static Counter getCounter(String name) {
		return factory.getCounter(name);
	}

	/**
	 * Returns existing stopwatch or creates new if necessary.
	 *
	 * @param name name of the Stopwatch
	 * @return stopwatch object
	 */
	public static Stopwatch getStopwatch(String name) {
		return factory.getStopwatch(name);
	}

	private static Simon getUnknown(String name) {
		return factory.getUnknown(name);
	}

	/**
	 * Autogenerates name for the Simon.
	 *
	 * @param suffix name suffix for eventual Simon discrimination
	 * @param includeMethodName if true, method name will be included in the name thus effectively adding another level
	 * of hierarchy
	 * @return autogenerated name for Simon
	 */
	public static String generateName(String suffix, boolean includeMethodName) {
		return factory.generateName(suffix, includeMethodName);
	}

	public static void enable() {
		factory = EnabledFactory.INSTANCE;
	}

	public static void disable() {
		factory = DisabledFactory.INSTANCE;
	}

	public static boolean isEnabled() {
		return factory instanceof EnabledFactory;
	}

	public static Simon getRootSimon() {
		return factory.getRootSimon();
	}

	public static Collection<String> simonNames() {
		return factory.simonNames();
	}

	public static void reset() {
		factory.reset();
	}
}
