package org.javasimon;

import java.util.*;

/**
 * SimonFactory.
 *
 * @author <a href="mailto:virgo47@gmail.com">Richard "Virgo" Richter</a>
 * @created Aug 4, 2008
 */
public final class SimonFactory {
	public static final String HIERARCHY_DELIMITER = ".";

	public static final String ROOT_SIMON_NAME = "";

	private static Factory factory = EnabledFactory.INSTANCE;

	static {
		reset();
		SimonConfiguration.init();
	}

	private SimonFactory() {
		throw new UnsupportedOperationException();
	}

	/**
	 * Returns Simon by its name if it exists.
	 *
	 * @param name name of the Simon
	 * @return Simon object
	 */
	public static Simon getSimon(String name) {
		return factory.getSimon(name);
	}

	/**
	 * Destroys Simon or replaces it with UnknownSimon if it's necessary to preserve the hierarchy.
	 *
	 * @param name name of the Simon
	 */
	public static void destroySimon(String name) {
		factory.destroySimon(name);
	}

	/**
	 * Returns existing Counter or creates new if necessary.
	 *
	 * @param name name of the Counter
	 * @return counter object
	 */
	public static Counter getCounter(String name) {
		return factory.getCounter(name);
	}

	/**
	 * Returns existing Stopwatch or creates new if necessary.
	 *
	 * @param name name of the Stopwatch
	 * @return stopwatch object
	 */
	public static Stopwatch getStopwatch(String name) {
		return factory.getStopwatch(name);
	}

	/**
	 * Returns existing UnknownSimon or creates new if necessary.
	 *
	 * @param name name of the Simon
	 * @return stopwatch object
	 */
	static Simon getUnknown(String name) {
		return factory.getUnknown(name);
	}

	/**
	 * Autogenerates name for the Simon using the class name and (optionaly) the method name.
	 *
	 * @param suffix name suffix for eventual Simon discrimination
	 * @param includeMethodName if true, method name will be included in the name thus effectively adding another level
	 * of hierarchy
	 * @return autogenerated name for Simon
	 */
	public static String generateName(String suffix, boolean includeMethodName) {
		return factory.generateName(suffix, includeMethodName);
	}

	public static void enable() {
		factory = EnabledFactory.INSTANCE;
	}

	public static void disable() {
		factory = DisabledFactory.INSTANCE;
	}

	public static boolean isEnabled() {
		return factory instanceof EnabledFactory;
	}

	public static Simon getRootSimon() {
		return factory.getRootSimon();
	}

	/**
	 * Returns collection containing names of all existing Simons.
	 *
	 * @return collection of all Simon names
	 */
	public static Collection<String> simonNames() {
		return factory.simonNames();
	}

	/**
	 * Resets the Simon factory (ignored if factory is disabled). All Simons are lost,
	 * but configuration is preserved.
	 */
	public static void reset() {
		factory.reset();
	}
}
