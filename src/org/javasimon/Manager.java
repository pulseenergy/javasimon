package org.javasimon;

import java.util.Collection;

/**
 * Manager functions.
 *
 * @author <a href="mailto:virgo47@gmail.com">Richard "Virgo" Richter</a>
 * @created Aug 11, 2008
 */
interface Manager {
	Simon getRootSimon();

	Simon getSimon(String name);

	/**
	 * Returns existing Counter or creates new if necessary.
	 *
	 * @param name name of the Counter
	 * @return counter object
	 */
	Counter getCounter(String name);

	/**
	 * Returns existing Stopwatch or creates new if necessary.
	 *
	 * @param name name of the Stopwatch
	 * @return stopwatch object
	 */
	Stopwatch getStopwatch(String name);

	/**
	 * Returns existing UnknownSimon or creates new if necessary.
	 *
	 * @param name name of the Simon
	 * @return stopwatch object
	 */
	Simon getUnknown(String name);

	/**
	 * Autogenerates name for the Simon using the class name and (optionaly) the method name.
	 *
	 * @param suffix name suffix for eventual Simon discrimination
	 * @param includeMethodName if true, method name will be included in the name thus effectively adding another level
	 * of hierarchy
	 * @return autogenerated name for Simon
	 */
	String generateName(String suffix, boolean includeMethodName);

	Collection<String> simonNames();

	/**
	 * Removes Simon from the Manager. If Simon has some children it will be replaced
	 * by UnknownSimon.
	 *
	 * @param name name of the Simon
	 */
	void destroySimon(String name);

	void reset();
}
